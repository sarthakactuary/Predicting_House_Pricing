library(moments)
skewness(HousePrice$price)
mean(HousePrice$price)>mean(HousePrice$price)
mean(HousePrice$price)>median(HousePrice$price)
#that mean's right skewed
install.packages("caret")
library(caret)
#that mean's right skewed
install.packages("caret")
#that mean's right skewed
install.packages("caret")
#that mean's right skewed
install.packages("caret")
library(caret)
HousePrice$price_bins <- cut(HousePrice$price,
breaks=quantile(HousePrice$price, probs = (0,1,0.1)),
HousePrice$price_bins <- cut(HousePrice$price,
breaks=quantile(HousePrice$price, probs = seq(0,1,0.1)),
include.lowest=TRUE)
set.seed(200)
split_index <- createDataPartition(HousePrice$price_bins,p=0.7,list = FALSE)
tarin_data <- HousePrice[split_index,]
test_data <- HousePrice[-split_index,]
summary(train_data)
train_data <- HousePrice[split_index,]
summary(train_data)
summary(test_data)
skewness(log(HousePrice$price))
skewness(log(HousePrice$price))
library(moments)
skewness(HousePrice$price)
skewness(log(HousePrice$price))
HousePrice$view <- factor(HousePrice$view, ordered = TRUE)
HousePrice$condition <- factor(HousePrice$condition, ordered = TRUE)
set.seed(200)
split_index <- createDataPartition(HousePrice$price_bins,p=0.7,list = FALSE)
train_data <- HousePrice[split_index,]
test_data <- HousePrice[-split_index,]
summary(train_data)
summary(test_data)
model_lm <- lm(price~.,data=train_data)
table(train_data)
model_lm <- lm(price~.,data=train_data)
levels(train_data)
cor(HousePrice[,sapply(-"price")],as.numeric)
cor(HousePrice[,sapply(-"price")],as.numeric(HousePrice))
cor(HousePrice)
cor(HousePrice$price,HousePrice$country)
cor(HousePrice[,is.numeric(HousePrice)])
cor(HousePrice[,sapply(HousePrice,is.numeric)])
dummyVars(HousePrice)
sapply(HousePrice, function(x) length(unique(x)))
nearZeroVar(HousePrice, saveMetrics = TRUE)
HousePrice <- read.csv("data.csv")
head(HousePrice)
colnames(HousePrice)
colSums(is.na(HousePrice))
sapply(HousePrice, is.numeric)
colSums(HousePrice==0)
sum(HousePrice$sqft_living)==sum(HousePrice$sqft_above+HousePrice$sqft_basement)
summary(HousePrice)
library(dplyr)
install.packages("Rcpp")
HousePrice %>%
group_by(view) %>%
summarise(median_price = median(price))
HousePrice %>%
group_by(condition) %>%
summarise(median_price=median(price))
hist(HousePrice$price,breaks = 50, main = "Price Distribution", xlab="Price",prob = TRUE)
lines(density(HousePrice$price),col="blue",lwd=2)
library(e1071)
skewness(HousePrice$price)
boxplot(HousePrice$price, horizontal = TRUE, main="Boxplot of Price")
library(ggplot2)
ggplot(HousePrice, aes(x=price))+
geom_histogram(bins=50,fill="darkgreen")+
labs(title="Distribution of price")+
theme_minimal()
ggplot(HousePrice, aes(x=price))+
geom_boxplot(fill="skyblue")+
labs(title="price",ylab="Price")+
theme_minimal()
library(tidyr)
ggplot(HousePrice, aes(x = factor(floors), y = price)) +
geom_boxplot(fill = "tomato") +
labs(title = "Price by Number of Bedrooms",
x = "Bedrooms",
y = "Price") +
theme_minimal()
ggplot(HousePrice, aes(x=log(price)))+
geom_histogram(bins=50,fill="darkgreen")+
labs(title="Distribution of price")+
theme_minimal()
colSums(HousePrice==0)
HousePrice <- subset(HousePrice, bedrooms!=0 & bathrooms!=0)
HousePrice$price[HousePrice$price==0] <- median(HousePrice$price)
colSums(HousePrice==0)
sum(HousePrice$sqft_living)==sum(HousePrice$sqft_above+HousePrice$sqft_basement)
summary(HousePrice)
ggplot(HousePrice, aes(x=log(price)))+
geom_histogram(bins=50,fill="darkgreen")+
labs(title="Distribution of price")+
theme_minimal()
data_long <- pivot_longer(
HousePrice,
cols = c(price, sqft_living, sqft_lot),
names_to = "Variable",
values_to = "Value"
)
data_long
View(data_long)
View(HousePrice)
ggplot(data_long, aes(x = Variable, y = Value)) +
geom_boxplot(fill = "orchid") +
labs(title = "Boxplots of Multiple Variables",
y = "Value") +
theme_minimal()
library(moments)
skewness(HousePrice$price)
skewness(HousePrice$price)
skewness(log(HousePrice$price))
mean(HousePrice$price)>median(HousePrice$price)
#that mean's right skewed
HousePrice$view <- factor(HousePrice$view, ordered = TRUE)
HousePrice$condition <- factor(HousePrice$condition, ordered = TRUE)
HousePrice$waterfront <- factor(HousePrice$waterfront, ordered = TRUE)
cor(HousePrice[,sapply(HousePrice,is.numeric)])
sapply(HousePrice, function(x) length(unique(x)))
library(caret)
nearZeroVar(HousePrice, saveMetrics = TRUE)
sapply(HousePrice,n_distinct)
train_data
HousePrice$price_bins <- cut(HousePrice$price,
breaks=quantile(HousePrice$price, probs = seq(0,1,0.1)),
include.lowest=TRUE)
set.seed(200)
split_index <- createDataPartition(HousePrice$price_bins,p=0.7,list = FALSE)
train_data <- HousePrice[split_index,]
test_data <- HousePrice[-split_index,]
View(train_data)
summary(train_data)
summary(test_data)
View(train_data)
View(test_data)
train_data <- train_data %>% select(-c(country,Check.sqft_living,price_bins))
test_data <- test_data %>% select(-c(country,Check.sqft_living,price_bins))
View(train_data)
model_lm <- lm(price~.,data=train_data)
View(model_lm)
model_lm <- lm(price~.,data=train_data)
summary(model_lm)
str(train_data)
#start with numeric variable
model_lm1 <- lm(price~bedrooms+bathrooms+sqft_lot+waterfront,data=train_data)
#start with numeric variable
rm(model_lm)
install.packages("car")
table(train_data$city)
model_lm1 <- lm(price~.,data=train_data)
library(car)
vif(model_lm1)
cor(HousePrice[,sapply(HousePrice,is.numeric)])
model_lm1 <- lm(price~bedrooms+bathrooms+floors+sqft_lot+sqft_above+sqft_basement+yr_built,data=train_data)
vif(model_lm1)
summary(model_lm1)
HousePrice$statezip <- factor(HousePrice$statezip, ordered = TRUE)
HousePrice$city <- factor(HousePrice$city, ordered = TRUE)
table(train_data$city)
table(test_data$city)
HousePrice <- read.csv("data.csv")
head(HousePrice)
colnames(HousePrice)
colSums(is.na(HousePrice))
sapply(HousePrice, is.numeric)
colSums(HousePrice==0)
HousePrice <- subset(HousePrice, bedrooms!=0 & bathrooms!=0)
HousePrice$price[HousePrice$price==0] <- median(HousePrice$price)
colSums(HousePrice==0)
sum(HousePrice$sqft_living)==sum(HousePrice$sqft_above+HousePrice$sqft_basement)
summary(HousePrice)
install.packages("dplyr")
library(dplyr)
HousePrice %>%
group_by(view) %>%
summarise(median_price = median(price))
HousePrice %>%
group_by(condition) %>%
summarise(median_price=median(price))
hist(HousePrice$price,breaks = 50, main = "Price Distribution", xlab="Price",prob = TRUE)
lines(density(HousePrice$price),col="blue",lwd=2)
install.packages("e1071")
library(e1071)
skewness(HousePrice$price)
boxplot(HousePrice$price, horizontal = TRUE, main="Boxplot of Price")
library(ggplot2)
ggplot(HousePrice, aes(x=price))+
geom_histogram(bins=50,fill="darkgreen")+
labs(title="Distribution of price")+
theme_minimal()
ggplot(HousePrice, aes(x=price))+
geom_boxplot(fill="skyblue")+
labs(title="price",ylab="Price")+
theme_minimal()
install.packages("tidyr")
library(tidyr)
data_long <- pivot_longer(
HousePrice,
cols = c(price, sqft_living, sqft_lot),
names_to = "Variable",
values_to = "Value"
)
ggplot(data_long, aes(x = Variable, y = Value)) +
geom_boxplot(fill = "orchid") +
labs(title = "Boxplots of Multiple Variables",
y = "Value")+
theme_minimal()
ggplot(HousePrice, aes(x = factor(floors), y = price)) +
geom_boxplot(fill = "tomato") +
labs(title = "Price by Number of Bedrooms",
x = "Bedrooms",
y = "Price") +
theme_minimal()
ggplot(HousePrice, aes(x=log(price)))+
geom_histogram(bins=50,fill="darkgreen")+
labs(title="Distribution of price")+
theme_minimal()
install.packages("moments")
library(moments)
skewness(HousePrice$price)
skewness(log(HousePrice$price))
mean(HousePrice$price)>median(HousePrice$price)
#that mean's right skewed
HousePrice$view <- factor(HousePrice$view, ordered = TRUE)
HousePrice$condition <- factor(HousePrice$condition, ordered = TRUE)
HousePrice$city <- factor(HousePrice$city, ordered = TRUE)
HousePrice$statezip <- factor(HousePrice$statezip, ordered = TRUE)
cor(HousePrice[,sapply(HousePrice,is.numeric)])
sapply(HousePrice, function(x) length(unique(x)))
install.packages("caret")
library(caret)
nearZeroVar(HousePrice, saveMetrics = TRUE)
sapply(HousePrice,n_distinct)
HousePrice$price_bins <- cut(HousePrice$price,
breaks=quantile(HousePrice$price, probs = seq(0,1,0.1)),
include.lowest=TRUE)
set.seed(200)
split_index <- createDataPartition(HousePrice$price_bins,p=0.7,list = FALSE)
train_data <- HousePrice[split_index,]
test_data <- HousePrice[-split_index,]
summary(train_data)
summary(test_data)
train_data <- train_data %>% select(-c(country,Check.sqft_living,price_bins))
test_data <- test_data %>% select(-c(country,Check.sqft_living,price_bins))
str(train_data)
#start with numeric variable
rm(model_lm)
model_lm1 <- lm(price~bedrooms+bathrooms+floors+sqft_lot+sqft_above+sqft_basement+yr_built,data=train_data)
install.packages("car")
library(car)
vif(model_lm1)
summary(model_lm1)
table(train_data$city)
table(test_data$city)
model_glm2 <- glm(price~bedrooms+bathrooms+floors+sqft_lot+sqft_above+sqft_basement+yr_built+view+condition+waterfront,data=train_data)
summary(model_glm2)
model_glm2$residuals
summary(model_glm2)
model_glm2 <- glm(price~bedrooms+bathrooms+floors+sqft_lot+sqft_above+sqft_basement+yr_built+view+condition+waterfront,data=train_data, family = gamma(link="log"))
model_glm2 <- glm(price~bedrooms+bathrooms+floors+sqft_lot+sqft_above+sqft_basement+yr_built+view+condition+waterfront,data=train_data, family = Gamma(link="log"))
summary(model_glm2)
model_lm2 <- lm(log(price)~bedrooms+bathrooms+floors+sqft_lot+sqft_above+sqft_basement+yr_built+view+condition+waterfront,data=train_data)
summary(model_lm2)
summary(model_lm1)
summary(model_lm2)
model_glm2 <- glm(price~bedrooms+bathrooms+floors+sqft_lot+sqft_above+sqft_basement+yr_built+view+condition+waterfront,data=train_data, family = Gamma(link="log"))
summary(model_glm2)
AIC(model_lm1,model_lm2)
AIC(model_glm2)
plot(model_lm2,which = 1)
plot(model_glm2,which = 1)
pred_lm2_log <- predict(model_lm2,newdata = test_data)
pred_lm2 <- exp(pred_lm2_log)
rmse_lm2 <- sqrt(mean((test_data$price-pred_lm2)^2))
median(test_data$price)
rmse_lm2/median(test_data$price)
pred_glm2 <- predict(model_glm2,newdata = test_data)
rmse_glm2 <- sqrt(mean((test_data$price-pred_glm2)^2))
rmse_glm2
vif(model_lm2)
vif(model_lm2)
library(car)
vif(model_lm2)
#using train function predict model random forest
library(caret)
ctrl <- trainControl(
method = "repeatedcv",
number=10,
repeats = 3,
savePredictions = "final"
)
ctrl <- trainControl(
method = "repeatedcv",
number=10,
repeats = 3,
savePredictions = "final")
View(train_data)
cor(HousePrice[,sapply(HousePrice,is.numeric)])
train_data$city <- factor(train_data$city)
View(train_data)
model_rf <- train(price~bedrooms+bathrooms+floors+sqft_lot+sqft_above+sqft_basement+yr_built+view+condition+waterfront+city,
data=train_data,
method="rf",
trControl=ctrl,
tuneGrid=(mtry=c(4,5,6)),
ntree=500,
importance=TRUE)
installed.packages("randomForest")
install.packages("randomForest")
library(randomForest)
model_rf <- train(price~bedrooms+bathrooms+floors+sqft_lot+sqft_above+sqft_basement+yr_built+view+condition+waterfront+city,
data=train_data,
method="rf",
trControl=ctrl,
tuneGrid=(mtry=c(4,5,6)),
ntree=500,
importance=TRUE)
model_rf <- train(price~bedrooms+bathrooms+floors+sqft_lot+sqft_above+sqft_basement+yr_built+view+condition+waterfront+city,
data=train_data,
method="rf",
trControl=ctrl,
tuneGrid=data.frame(mtry=c(4,5,6)),
ntree=500,
importance=TRUE)
model_rf$pred
summary(model_rf)
model_rf
model_rf
rmse_lm2
pred_rf <- predict(model_rf, newdata = test_data)
pred_rf <- predict(model_rf,newdata = test_data)
pred_rf <- predict(model_rf,newdata = test_data, type = "response")
test_data$city <- factor(test_data$city)
pred_rf <- predict(model_rf,newdata = test_data)
pred_rf <- predict(model_rf,newdata = test_data)
model_rf_vars <- names(model_rf$trainingData)[-1]
test_data_subset <- test_data[,model_rf_vars]
pred_rf <- predict(model_rf,newdata = test_data_subset)
is.na(test_data_subset)
colSums(is.na(test_data_subset))
names(train_data$city)
colnames(train_data$city)
names(table(train_data$city))
names(table(train_data$city))==names(table(test_data$city)
names(table(train_data$city))==names(table(test_data$city))
names(table(train_data$city))==names(table(test_data$city))
names(table(train_data$city))
names(table(test_data$city))
View(test_data_subset)
View(test_data)
View(test_data)
test_data_subset$city <- factor(
test_data_subset$city,
levels = levels(train_data$city)
)
pred_rf <- predict(model_rf,newdata = test_data_subset)
rmse_rf <- sqrt(mean((test_data$price-pred_rf)^2))
rmse_lm2
rmse_rf
names(table(test_data$city))
rmse_rf
rmse_lm2
sum(is.na(pred_rf))
varImp(model_rf)
install.packages("doParallel")
library(doParallel)
cl <- makePSOCKcluster(4)
registerDoParallel(cl)
ctrl2 <- trainControl(
method = "repeatedcv",
number=10,
repeats = 3,
savePredictions = "final",
allowParallel = TRUE)
View(train_data)
model_rf2 <- train(price~bedrooms+bathrooms+sqft_living+sqft_lot+floors+waterfront+view+condition+yr_built,
data=train_data,
method  = "rf",
ntree=1000,
tuneGrid=expand.grid(mtry=c(2,4,6,8,10)),
importance=TRUE)
model_rf2
ctrl2 <- trainControl(
method = "cv",
number=10,
savePredictions = "final",
allowParallel = TRUE)
model_rf2 <- train(price~bedrooms+bathrooms+sqft_living+sqft_lot+floors+waterfront+view+condition+yr_built,
data=train_data,
method  = "rf",
ntree=1000,
tuneGrid=expand.grid(mtry=c(2,4,6,8,10)),
importance=TRUE)
model_rf2
stopCluster(cl)
HousePrice <- read.csv("original_data.csv")
head(HousePrice)
HousePrice <- read.csv("original_data.csv")
head(HousePrice)
colnames(HousePrice)
colSums(is.na(HousePrice))
sapply(HousePrice, is.numeric)
colSums(HousePrice==0)
HousePrice <- subset(HousePrice, bedrooms!=0 & bathrooms!=0)
HousePrice$price[HousePrice$price==0] <- median(HousePrice$price)
colSums(HousePrice==0)
sum(HousePrice$sqft_living)==sum(HousePrice$sqft_above+HousePrice$sqft_basement)
summary(HousePrice)
install.packages("dplyr")
library(dplyr)
hist(HousePrice$price,breaks = 50, main = "Price Distribution", xlab="Price",prob = TRUE)
lines(density(HousePrice$price),col="blue",lwd=2)
install.packages("e1071")
library(e1071)
skewness(HousePrice$price)
boxplot(HousePrice$price, horizontal = TRUE, main="Boxplot of Price")
library(ggplot2)
ggplot(HousePrice, aes(x=price))+
geom_histogram(bins=50,fill="darkgreen")+
labs(title="Distribution of price")+
theme_minimal()
ggplot(HousePrice, aes(x=price))+
geom_boxplot(fill="skyblue")+
labs(title="price",ylab="Price")+
theme_minimal()
install.packages("tidyr")
library(tidyr)
data_long <- pivot_longer(
HousePrice,
cols = c(price, sqft_living, sqft_lot),
names_to = "Variable",
values_to = "Value"
)
ggplot(data_long, aes(x = Variable, y = Value)) +
geom_boxplot(fill = "orchid") +
labs(title = "Boxplots of Multiple Variables",
y = "Value")+
theme_minimal()
ggplot(HousePrice, aes(x = factor(floors), y = price)) +
geom_boxplot(fill = "tomato") +
labs(title = "Price by Number of Bedrooms",
x = "Bedrooms",
y = "Price") +
theme_minimal()
ggplot(HousePrice, aes(x=log(price)))+
geom_histogram(bins=50,fill="darkgreen")+
labs(title="Distribution of price")+
theme_minimal()
install.packages("moments")
library(moments)
skewness(HousePrice$price)
skewness(log(HousePrice$price))
ggplot(HousePrice, aes(x=log(price)))+
geom_histogram()
mean(HousePrice$price)>median(HousePrice$price)
#that mean's right skewed
HousePrice$view <- factor(HousePrice$view, ordered = TRUE)
HousePrice$condition <- factor(HousePrice$condition, ordered = TRUE)
HousePrice$city <- factor(HousePrice$city, ordered = TRUE)
HousePrice$statezip <- factor(HousePrice$statezip, ordered = TRUE)
cor(HousePrice[,sapply(HousePrice,is.numeric)])
sapply(HousePrice, function(x) length(unique(x)))
install.packages("caret")
library(caret)
nearZeroVar(HousePrice, saveMetrics = TRUE)
sapply(HousePrice,n_distinct)
HousePrice$price_bins <- cut(HousePrice$price,
breaks=quantile(HousePrice$price, probs = seq(0,1,0.1)),
include.lowest=TRUE)
set.seed(123)
split_index <- createDataPartition(HousePrice$price_bins,p=0.7,list = FALSE)
train_data <- HousePrice[split_index,]
test_data <- HousePrice[-split_index,]
summary(train_data)
summary(test_data)
train_data <- train_data %>% select(-c(country,Check.sqft_living,price_bins))
rlang::last_trace()
train_data <- train_data %>% select(-c(country,sqft_living,price_bins))
test_data <- test_data %>% select(-c(country,sqft_living,price_bins))
str(train_data)
#start with numeric variable
model_lm1 <- lm(price~bedrooms+bathrooms+floors+sqft_lot+sqft_above+sqft_basement+yr_built,data=train_data)
summary(model_lm1)
#replace basement and above to living
model_lm2 <- lm(price~bedrooms+bathrooms+floors+sqft_lot+sqft_living+yr_built,data=train_data)
#replace basement and above to living
model_lm2 <- lm(price~bedrooms+bathrooms+floors+sqft_lot+yr_built,data=train_data)
g(price)~bedrooms+bathrooms+floors+sqft_lot+sqft_living+yr_built,data=train_data)
model_lm2_log <- lm(log(price)~bedrooms+bathrooms+floors+sqft_lot+sqft_living+yr_built,data=train_data)
train_data <- train_data %>% select(-c(country,price_bins))
test_data <- test_data %>% select(-c(country,price_bins))
str(train_data)
#start with numeric variable
model_lm1 <- lm(price~bedrooms+bathrooms+floors+sqft_lot+sqft_above+sqft_basement+yr_built,data=train_data)
summary(model_lm1)
#replace basement and above to living
model_lm2 <- lm(price~bedrooms+bathrooms+floors+sqft_lot+yr_built,data=train_data)
summary(model_lm2)
model_lm2 <- lm(price~bedrooms+bathrooms+floors+sqft_lot+yr_built,data=train_data)
summary(model_lm2)
#apply log into model_lm2
model_lm2_log <- lm(log(price)~bedrooms+bathrooms+floors+sqft_lot+sqft_living+yr_built,data=train_data)
