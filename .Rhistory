#more changes
model_lm8 <- lm(price~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+view,data=train_data)
summary(model_lm8)
predict_lm8 <- predict(model_lm8,test_data)
predict_lm8 <- predict(model_lm8,test_data)
rmse_lm8 <- sqrt(mean((test_data$price-predict_lm8)^2))
print(rmse_lm7)
print(rmse_lm8)
#more changes
model_lm8 <- lm(price~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+view+waterfront,data=train_data)
summary(model_lm8)
predict_lm8 <- predict(model_lm8,test_data)
rmse_lm8 <- sqrt(mean((test_data$price-predict_lm8)^2))
print(rmse_lm8)
#more changes
model_lm8 <- lm(price~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront,data=train_data)
summary(model_lm8)
predict_lm8 <- predict(model_lm8,test_data)
rmse_lm8 <- sqrt(mean((test_data$price-predict_lm8)^2))
print(rmse_lm8)
#more changes
model_lm8 <- lm(price~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data)
summary(model_lm8)
predict_lm8 <- predict(model_lm8,test_data)
rmse_lm8 <- sqrt(mean((test_data$price-predict_lm8)^2))
print(rmse_lm8)
summary(model_lm8)
plot(model_lm8,which = 1)
#more changes
model_lm8 <- lm(log(price)~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data)
summary(model_lm8)
predict_lm8 <- exp(predict(model_lm8,test_data))
rmse_lm8 <- sqrt(mean((test_data$price-predict_lm8)^2))
print(rmse_lm8)
plot(model_lm8,which = 1)
#more changes
model_lm8 <- lm(log(price)~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view+condition,data=train_data)
summary(model_lm8)
predict_lm8 <- exp(predict(model_lm8,test_data))
rmse_lm8 <- sqrt(mean((test_data$price-predict_lm8)^2))
print(rmse_lm8)
plot(model_lm8,which = 1)
#more changes
model_lm8 <- lm(price~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data)
summary(model_lm8)
predict_lm8 <- exp(predict(model_lm8,test_data))
rmse_lm8 <- sqrt(mean((test_data$price-predict_lm8)^2))
print(rmse_lm8)
plot(model_lm8,which = 1)
plot(model_lm8,which = 1)
#more changes
model_lm8 <- lm(price~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data)
summary(model_lm8)
predict_lm8 <- exp(predict(model_lm8,test_data))
rmse_lm8 <- sqrt(mean((test_data$price-predict_lm8)^2))
print(rmse_lm8)
plot(model_lm8,which = 1)
plot(model_lm8,which = 2)
#now jump to randomForest
install.packages("randomForest")
library(randomForest)
library(randomForest)
library(doParallel)
model_rf1 <- randomForest(price~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+factor(waterfront)+factor(view)+factor(condition),data=train_data,ntree=500)
model_rf1 <- randomForest(price~bedrooms+bathrooms+sqft_living+floors+yr_built+sqft_lot+factor(waterfront)+factor(view)+factor(condition),data=train_data,ntree=500)
model_rf1 <- randomForest(price~bedrooms+bathrooms+sqft_living+floors+yr_built+sqft_lot+factor(waterfront)+factor(view)+factor(condition),data=train_data,ntree=500)
model_rf1 <- randomForest(price~bedrooms+bathrooms+sqft_living+floors+yr_built+sqft_lot+waterfront+factor(view)+factor(condition),data=train_data,ntree=500)
model_rf1 <- randomForest(price~bedrooms+bathrooms+sqft_living+floors+yr_built+sqft_lot+waterfront+view+condition,data=train_data,ntree=500)
predict_rf <- predict(model_rf1,test_data)
predict_rf1 <- predict(model_rf1,test_data)
rmse_rf1 <- sqrt(mean((test_data$price-predict_rf1)^2))
print(rmse_rf1)
model_rf1 <- randomForest(price~bedrooms+bathrooms+sqft_living+floors+yr_built+sqft_lot+waterfront+view+condition,data=train_data,ntree=1000,mtry=6)
predict_rf1 <- predict(model_rf1,test_data)
rmse_rf1 <- sqrt(mean((test_data$price-predict_rf1)^2))
print(rmse_rf1)
model_rf1 <- randomForest(price~bedrooms+bathrooms+sqft_living+floors+yr_built+sqft_lot,data=train_data,ntree=1000,mtry=6)
predict_rf1 <- predict(model_rf1,test_data)
rmse_rf1 <- sqrt(mean((test_data$price-predict_rf1)^2))
print(rmse_rf1)
model_rf1 <- randomForest(price~bedrooms+bathrooms+sqft_living+floors+yr_built+sqft_lot,data=train_data,ntree=1000,mtry=6,importance=TRUE)
varImp(model_rf1)
varImp(model_rf1)
varImp(model_rf1)
print(rmse_rf1)
vif(model_lm1)
library(car)
vif(model_lm1)
vif(model_rf1)
vcov(model_rf1)
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
model_rf1 <- randomForest(price~bathrooms+sqft_living+floors+yr_built+sqft_lot+waterfront+factor(view)+factor(condition)+yr_renovated+factor(statezip),data=train_data,ntree=500,importance=TRUE,do.trace=100)
library(randomForest)
model_rf1 <- randomForest(price~bathrooms+sqft_living+floors+yr_built+sqft_lot+waterfront+factor(view)+factor(condition)+yr_renovated+factor(statezip),data=train_data,ntree=500,importance=TRUE,do.trace=100)
names(train_data)
train_data$view <- factor(train_data$view)
train_data$condition <- factor(train_data$condition)
train_data$city <- factor(train_data$city)
train_data$statezip <- factor(train_data$statezip)
model_rf1 <- randomForest(price~bathrooms+sqft_living+floors+yr_built+sqft_lot+waterfront+view+condition+yr_renovated+statezip,data=train_data,ntree=500,importance=TRUE,do.trace=100)
varImp(model_rf1)
library(caret)
varImp(model_rf1)
predict_rf1 <- predict(model_rf1,test_data)
rmse_rf1 <- sqrt(mean((test_data$price-predict_rf1)^2))
print(rmse_rf1)
tuneRF(
train_data[, c("bathrooms", "sqft_living", "floors", "yr_built", "sqft_lot", "waterfront", "view", "condition", "yr_renovated", "statezip")],
train_data$price,
ntreeTry = 500,
stepFactor = 1.5,
improve = 0.01
)
tuneRF(
train_data[, c("bathrooms", "sqft_living", "floors", "yr_built", "sqft_lot", "waterfront", "view", "condition", "yr_renovated", "statezip")],
train_data$price,
ntreeTry = 500,
stepFactor = 1.5,
improve = 0.001
)
varImp(model_rf1)
model_rf1 <- randomForest(log(price)~bathrooms+sqft_living+floors+yr_built+sqft_lot+waterfront+view+condition+yr_renovated+statezip,data=train_data,ntree=500,importance=TRUE,do.trace=100,mtry=4)
varImp(model_rf1)
predict_rf1 <- exp(predict(model_rf1,test_data))
rmse_rf1 <- sqrt(mean((test_data$price-predict_rf1)^2))
print(rmse_rf1)
model_rf1 <- randomForest(price~bathrooms+sqft_living+floors+yr_built+sqft_lot+waterfront+view+condition+yr_renovated+statezip,data=train_data,ntree=500,importance=TRUE,do.trace=100,mtry=4)
model_rf1 <- randomForest(price~bathrooms+sqft_living+floors+yr_built+sqft_lot+waterfront+view+condition+yr_renovated+statezip,data=train_data,ntree=1000,importance=TRUE,do.trace=100,mtry=4)
predict_rf1 <- predict(model_rf1,test_data)
rmse_rf1 <- sqrt(mean((test_data$price-predict_rf1)^2))
print(rmse_rf1)
model_rf1 <- randomForest(price~bathrooms+sqft_living+floors+yr_built+sqft_lot+waterfront+view+condition+yr_renovated+statezip+city,data=train_data,ntree=600,importance=TRUE,do.trace=100,mtry=4)
predict_rf1 <- predict(model_rf1,test_data)
rmse_rf1 <- sqrt(mean((test_data$price-predict_rf1)^2))
print(rmse_rf1)
varImp(model_rf1)
print(rmse_rf1)
tuneRF(
train_data[, c("bathrooms", "sqft_living", "floors", "yr_built", "sqft_lot", "waterfront", "view", "condition", "yr_renovated", "statezip","city")],
train_data$price,
ntreeTry = 500,
stepFactor = 1.5,
improve = 0.001
)
tuneRF(
train_data[, c("bathrooms", "sqft_living", "floors", "yr_built", "sqft_lot", "waterfront", "view", "condition", "yr_renovated", "statezip","city")],
log(train_data$price),
ntreeTry = 500,
stepFactor = 1.5,
improve = 0.01
)
tuneRF(
train_data[, c("bathrooms", "sqft_living", "floors", "yr_built", "sqft_lot", "waterfront", "view", "condition", "yr_renovated", "statezip","city")],
train_data$price,
ntreeTry = 500,
stepFactor = 1.5,
improve = 0.01
)
library(moments)
skewness(HousePrice$price)
skewness(log(HousePrice$price))
ggplot(HousePrice, aes(x=price))+
geom_histogram()
ggplot(HousePrice, aes(x=log(price))+
ggplot(HousePrice, aes(x=log(price)))+
geom_histogram()
ggplot(HousePrice, aes(x=log(price)))+
ggplot(HousePrice, aes(x=log(price)))+
geom_histogram()
#time to use train function
model_train1 <- train(log(price)~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data,
method="lm",
trControl=trainControl(method="cv",number = 5))
pred_train1 <- predict(model_train1,test_data)
View(test_data)
View(train_data)
pred_train1 <- exp(predict(model_train1,test_data))
rmse_train1 <- sqrt(mean((test_data$price-pred_train1)))
print(rmse_train1)
postResample(pred_train1,test_data$price)
rmse_train1 <- sqrt(mean((test_data$price-pred_train1)^2))
print(rmse_train1)
rmse_train1/median(test_data$price)
#time to use train function
model_train1 <- train(log(price)~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data,
method="lm",
trControl=trainControl(method="cv",number = 10))
pred_train1 <- exp(predict(model_train1,test_data))
rmse_train1 <- sqrt(mean((test_data$price-pred_train1)^2))
print(rmse_train1)
model_train1 <- train(log(price)~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data,
method="lm",
trControl=trainControl(method="cv",number = 10))
pred_train1 <- exp(predict(model_train1,test_data))
rmse_train1 <- sqrt(mean((test_data$price-pred_train1)^2))
print(rmse_train1)
#time to use train function
model_train1 <- train(log(price)~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data,
method="lm",
trControl=trainControl(method="repeatcv",number = 10,repeats = 3))
#time to use train function
model_train1 <- train(log(price)~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data,
method="lm",
trControl=trainControl(method="repeatscv",number = 10,repeats = 3))
#time to use train function
model_train1 <- train(log(price)~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data,
method="lm",
trControl=trainControl(method="repeatedcv",number = 10,repeats = 3))
pred_train1 <- exp(predict(model_train1,test_data))
rmse_train1 <- sqrt(mean((test_data$price-pred_train1)^2))
print(rmse_train1)
#time to use train function
model_train1 <- train(log(price)~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data,
method="lm",
trControl=trainControl(method="cv",number=5))
pred_train1 <- exp(predict(model_train1,test_data))
rmse_train1 <- sqrt(mean((test_data$price-pred_train1)^2))
print(rmse_train1)
postResample(pred_train1,test_data$price)
#time to use train function
model_train1 <- train(log(price)~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data,
method="glm",
family=Gamma(link = "log")
trControl=trainControl(method="cv",number=5))
#time to use train function
model_train1 <- train(price~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data,
method="glm",
family=Gamma(link = "log")
trControl=trainControl(method="cv",number=5))
#time to use train function
model_train1 <- train(price~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data,
method="glm",
family=Gamma(link = "log"),
trControl=trainControl(method="cv",number=5))
pred_train1 <- exp(predict(model_train1,test_data))
rmse_train1 <- sqrt(mean((test_data$price-pred_train1)^2))
print(rmse_train1)
postResample(pred_train1,test_data$price)
#time to use train function
model_train1 <- train(price~.,data=train_data,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=1000,
trControl=trainControl(method="cv",number=5))
#time to use train function
names(train_data)
model_train1 <- train(price~ . -country,Check.sqft_living,price_bins,data=train_data,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=1000,
trControl=trainControl(method="cv",number=5))
model_train1 <- train(price~ . -country,Check.sqft_living,price_bins,date,street
data=train_data,
model_train1 <- train(price~ . -country,-Check.sqft_living,-price_bins,-date,-street,
data=train_data,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=1000,
trControl=trainControl(method="cv",number=5))
model_train1 <- train(price~ . -country-Check.sqft_living-price_bins-date-street,
data=train_data,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=1000,
trControl=trainControl(method="cv",number=5))
model_train1 <- train(price~ . -country - Check.sqft_living - price_bins - date-street,
data=train_data,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=1000,
trControl=trainControl(method="cv",number=5))
model_train1 <- train(price ~ . -country - Check.sqft_living - price_bins - date - street,
data=train_data,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=1000,
trControl=trainControl(method="cv",number=5))
sapply(train_data, function(x) if (is.factor(x)) nlevels(x))
model_train1 <- train(price ~ . -country - Check.sqft_living - price_bins - date - street,
data=train_data,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=1000,
trControl=trainControl(method="cv",number=5))
train_data_clean <- train_data %>%
select(-country, - Check.sqft_living, - price_bins, - date, - street)
train_data_clean <- train_data %>%
select(-country, - Check.sqft_living, - price_bins, - date, - street)
#time to use train function
library(dplyr)
train_data_clean <- train_data %>%
select(-country, - Check.sqft_living, - price_bins, - date, - street)
model_train1 <- train(price ~ . -country - Check.sqft_living - price_bins - date - street,
data=train_data_clean,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=1000,
trControl=trainControl(method="cv",number=5))
model_train1 <- train(price ~ .,
data=train_data_clean,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=1000,
trControl=trainControl(method="cv",number=5))
View(train_data_clean)
View(train_data_clean)
pred_train1 <- predict(model_train1,test_data)
model_train1 <- train(price ~ . -city,
data=train_data_clean,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=1000,
trControl=trainControl(method="cv",number=5))
pred_train1 <- predict(model_train1,test_data)
train_data_clean <- train_data %>%
select(-country, - Check.sqft_living, - price_bins, - date, - street, -city)
model_train1 <- train(price ~ .,
data=train_data_clean,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=1000,
trControl=trainControl(method="cv",number=5))
View(train_data_clean)
pred_train1 <- predict(model_train1,test_data)
rmse_train1 <- sqrt(mean((test_data$price-pred_train1)^2))
print(rmse_train1)
postResample(pred_train1,test_data$price)
model_train1 <- train(log(price) ~ .,
data=train_data_clean,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=1000,
trControl=trainControl(method="cv",number=5))
pred_train1 <- exp(predict(model_train1,test_data))
rmse_train1 <- sqrt(mean((test_data$price-pred_train1)^2))
print(rmse_train1)
postResample(pred_train1,test_data$price)
model_train1 <- train(log(price) ~ .,
data=train_data_clean,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=500,
trControl=trainControl(method="cv",number=5))
pred_train1 <- exp(predict(model_train1,test_data))
rmse_train1 <- sqrt(mean((test_data$price-pred_train1)^2))
print(rmse_train1)
postResample(pred_train1,test_data$price)
model_train1 <- train(price ~ .,
data=train_data_clean,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=500,
trControl=trainControl(method="cv",number=5))
pred_train1 <- predict(model_train1,test_data)
rmse_train1 <- sqrt(mean((test_data$price-pred_train1)^2))
print(rmse_train1)
model_train1_log <- train(log(price) ~ .,
data=train_data_clean,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=500,
trControl=trainControl(method="cv",number=5))
model_train1 <- train(price ~ .,
data=train_data_clean,
method="rf",
tuneGrid=data.frame(mtry=c(2,4,6)),
ntree=500,
trControl=trainControl(method="cv",number=5))
pred_train1 <- predict(model_train1,test_data)
pred_train1_log <- exp(predict(model_train1_log,test_data))
rmse_train1_log <- sqrt(mean((test_data$price-pred_train1_log)^2))
rmse_train1 <- sqrt(mean((test_data$price-pred_train1)^2))
print(rmse_train1)
print(rmse_train1_log)
ggplot(HousePrice,aes(x=sqft_living))+
geom_histogram(fill="darkgreen")
ggplot(HousePrice,aes(x=log(sqft_living))+
ggplot(HousePrice,aes(x=log(sqft_living)))+
geom_histogram(fill="darkgreen")
ggplot(HousePrice,aes(x=log(sqft_living)))+
ggplot(HousePrice,aes(x=log(sqft_living)))+
geom_histogram(fill="darkgreen")
ggplot(HousePrice,aes(x=sqft_lot))+
geom_histogram(fill="darkgreen")
ggplot(HousePrice,aes(x=log(sqft_lot)))+
geom_histogram(fill="darkgreen")
ggplot(HousePrice,aes(x=bedroom))+
geom_histogram(fill="darkgreen")
ggplot(HousePrice,aes(x=bedrooms))+
geom_histogram(fill="darkgreen")
ggplot(HousePrice,aes(x=log(bedrooms)))+
geom_histogram(fill="darkgreen")
model_glm <- glm(price~bedrooms+bathrooms+sqft_living+sqft_lot,
data=train_data,
family = Gamma(link = "log"))
summary(model_glm)
AIC(model_rf1)
AIC(model_rf1)
pred_glm <- predict(model_glm,test_data)
pred_glm <- predict(model_glm,test_data,type = "response")
rmse_glm <- sqrt(mean((test_data$price-pred_glm)^2))
print(rmse_glm)
model_glm <- glm(price~bedrooms+bathrooms+sqft_living+sqft_lot+floors,
data=train_data,
family = Gamma(link = "log"))
summary(model_glm)
pred_glm <- predict(model_glm,test_data,type = "response")
rmse_glm <- sqrt(mean((test_data$price-pred_glm)^2))
print(rmse_glm)
rmse_glm <- sqrt(mean((test_data$price-pred_glm)^2))
model_glm <- glm(price~bedrooms+bathrooms+sqft_living+sqft_lot+floors+yr_built,
data=train_data,
family = Gamma(link = "log"))
summary(model_glm)
pred_glm <- predict(model_glm,test_data,type = "response")
rmse_glm <- sqrt(mean((test_data$price-pred_glm)^2))
print(rmse_glm)
install.packages("car")
model_glm <- glm(price~bedrooms+bathrooms+sqft_living+sqft_lot+floors+yr_built,
data=train_data,
family = tweedie(var.power=1.5,link.power=0))
#making some changes
train_data$log_price <- log(train_data$price)
upper_limit <- quantile(train_data$price,0.99)
upper_limit
upper_limit <- quantile(train_data$price,1)
upper_limit
upper_limit <- quantile(train_data$price,0.98)
upper_limit
upper_limit <- quantile(train_data$price,0.99)
upper_limit
train_data$price <- pmin(train_data$price,upper_limit)
train_data$sqft_living <- log(train_data$sqft_living)
train_data$sqft_lot <- log(train_data$sqft_lot)
train_data$sqft_living <- exp(train_data$sqft_living)
train_data$sqft_lot <- exp(train_data$sqft_lot)
train_data$log_sqft_living <- exp(train_data$sqft_living)
train_data$log_sqft_lot <- log(train_data$sqft_lot)
train_data$sqft_living <- pmin(train_data$sqft_living,quantile(train_data$sqft_living,0.99))
train_data$sqft_lot <- pmin(train_data$sqft_lot,quantile(train_data$sqft_lot,0.99))
model_glm2 <- glm(price~bedrooms+bathrooms+log_sqft_living+log_sqft_lot,
data = train_data,
family = Gamma(link = "log"))
model_glm2 <- glm(price~bedrooms+bathrooms+log_sqft_living+log_sqft_lot,
data = train_data,
family = Gamma(link = "log"))
print(rmse_lm8)
#more changes
model_lm8 <- lm(price~bedrooms*bathrooms*sqft_living+floors+bathrooms:yr_built+sqft_lot+waterfront+view,data=train_data)
summary(model_lm8)
predict_lm8 <- exp(predict(model_lm8,test_data))
rmse_lm8 <- sqrt(mean((test_data$price-predict_lm8)^2))
print(rmse_lm8)
plot(model_lm8,which = 1)
plot(model_lm8,which = 2)
print(rmse_lm8)
model_lm9 <- lm(log_price~bedrooms+log_sqft_living+waterfront,
data=train_data)
model_lm9 <- lm(log_price~bedrooms+log_sqft_living+waterfront,
data=train_data)
View(train_data)
train_data$log_sqft_living <- log(train_data$sqft_living)
model_glm2 <- glm(price~bedrooms+bathrooms+log_sqft_living+log_sqft_lot,
data = train_data,
family = Gamma(link = "log"))
summary(model_glm2)
model_glm2 <- glm(price~bedrooms+bathrooms+log_sqft_living+log_sqft_lot+yr_built,
data = train_data,
family = Gamma(link = "log"))
summary(model_glm2)
model_glm2 <- glm(price~bedrooms+bathrooms+log_sqft_living+log_sqft_lot+yr_built+factor(condition)+factor(view)+waterfront+floors,
data = train_data,
family = Gamma(link = "log"))
summary(model_glm2)
library(car)
library(MASS)
stepAIC(model_glm2)
model_glm2 <- glm(price~bedrooms*bathrooms*log_sqft_living+log_sqft_lot+yr_built+factor(condition)+factor(view)+waterfront+floors,
data = train_data,
family = Gamma(link = "log"))
summary(model_glm2)
model_lm9 <- lm(log_price~bedrooms+log_sqft_living+waterfront,
data=train_data)
summary(model_lm)
summary(model_lm9)
model_lm9 <- lm(log_price~bedrooms+bathrooms+log_sqft_living+waterfront+sqft_lot,
data=train_data)
summary(model_lm9)
model_lm9 <- lm(log_price~bedrooms+bathrooms+log_sqft_living+waterfront+sqft_lot+view+condition+floors+yr_built+city+statezip,
data=train_data)
summary(model_lm9)
model_lm9 <- lm(log_price~bedrooms+bathrooms+log_sqft_living+waterfront+sqft_lot+view+condition+floors+yr_built,
data=train_data)
summary(model_lm9)
model_lm9 <- lm(log_price~bedrooms+bathrooms+log_sqft_living+waterfront+sqft_lot+view+condition+floors+yr_built+factor(city),
data=train_data)
summary(model_lm9)
model_lm9 <- lm(log_price~bedrooms+bathrooms+log_sqft_living+waterfront+sqft_lot+view+condition+floors+yr_built+factor(city)+factor(statezip),
data=train_data)
summary(model_lm9)
plot(model_lm9,which=1)
plot(model_lm9,which=2)
predict(model_lm9,test_data)
predict(model_lm9,test_data)
library(moments)
skewness(train_data$log_price)
skewness(train_data$log_sqft_living)
skewness(train_data$sqft_living)
skewness(train_data$sqft_lot)
skewness(train_data$price)
